{{ header }}
<div id="account-sales" class="container">
  <ul class="breadcrumb">
    {% for breadcrumb in breadcrumbs %}
    <li><a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a></li>
    {% endfor %}
  </ul>
  <div class="row">{{ column_left }}
<!--  
    {% if column_left and column_right %}
    {% set class = 'col-sm-6' %}
    {% elseif column_left or column_right %}
    {% set class = 'col-sm-9' %}
    {% else %}
    {% set class = 'col-sm-12' %}
    {% endif %}
-->
    {% set class = 'col-sm-12' %}
    <div id="content" class="{{ class }}">{{ content_top }}
      <div id="map" style="height: 600px; width: 100%;">      
      </div>

    <div style="text-align:left">
        <span style="height: 9px;  width: 9px; background-color: #2c9e60; display: inline-block; border-radius: 50%;"></span> - Yours past sales; 
        <span style="height: 9px;  width: 9px; background-color: #4873f8; display: inline-block; border-radius: 50%;"></span> - Yours current sales;<br> 
        <span style="height: 9px;  width: 9px; background-color: #ab0000; display: inline-block; border-radius: 50%;"></span> - Others past sales; 
        <span style="height: 9px;  width: 9px; background-color: #f20000; display: inline-block; border-radius: 50%;"></span> - Others current sales; 
    </div>


      <br>

      {{ content_bottom }}

    </div>
<!--    
    {{ column_right }}
-->    
  </div>
</div>


<script type="text/javascript"><!--

	mapboxgl.accessToken = 'pk.eyJ1IjoidmFsZHJveiIsImEiOiJja2xwYzJwZWYweGFoMnVyMDZ3MWVqbjRsIn0.Q9A8js9KE8rOJ_F6YIhYrA';
    const map = new mapboxgl.Map({
        container: 'map',
        // style: 'mapbox://styles/mapbox/streets-v11',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [-75.52, 40.06], //40.06252846492766, -75.52011866441217
        zoom: 9.00
    });

    map.addControl(new mapboxgl.NavigationControl({
      showCompass: false
    }));

    map.on('load', () => {
        map.addSource('all_old', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
                    {% if all_old %}
                    {% for order in all_old %}
                    {% if not loop.first %},{% endif %}
                    {
                        'type': 'Feature',
                        'properties': {
                            'description':
                                '<table><tr><td><strong>Scout:</strong></td><td>{{order.scout_firstname}} {{order.scout_lastname}}</td></tr><tr><td><strong>Order# & Date:</strong></td><td>#{{order.order_id}} - {{order.order_date}}</td></tr><tr><td><strong>Customer:</strong></td><td>{{order.cust_firstname}} {{order.cust_lastname}}<br>{{order.address_line_1}}<br>{{order.city}}, {{order.state}} {{order.postal_code}}</td></tr><tr><td></td><td>{{order.products}}</td></tr></table>'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [{{order.lon}}, {{order.lat}}]
                        }
                    }
                    {% endfor %}
                    {% endif %}
                ]
            }
        });
        map.addSource('my_old', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
                    {% if my_old %}
                    {% for order in my_old %}
                    {% if not loop.first %},{% endif %}
                    {
                        'type': 'Feature',
                        'properties': {
                            'description':
                                '<table><tr><td><strong>Scout:</strong></td><td>{{order.scout_firstname}} {{order.scout_lastname}}</td></tr><tr><td><strong>Order# & Date:</strong></td><td>#{{order.order_id}} - {{order.order_date}}</td></tr><tr><td><strong>Customer:</strong></td><td>{{order.cust_firstname}} {{order.cust_lastname}}<br>{{order.address_line_1}}<br>{{order.city}}, {{order.state}} {{order.postal_code}}</td></tr><tr><td></td><td>{{order.products}}</td></tr></table>'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [{{order.lon}}, {{order.lat}}]
                        }
                    }
                    {% endfor %}
                    {% endif %}
                ]
            }
        });
        map.addSource('all_current', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
                    {% if all_current %}
                    {% for order in all_current %}
                    {% if not loop.first %},{% endif %}
                    {
                        'type': 'Feature',
                        'properties': {
                            'description':
                                '<table><tr><td><strong>Scout:</strong></td><td>{{order.scout_firstname}} {{order.scout_lastname}}</td></tr><tr><td><strong>Order# & Date:</strong></td><td>#{{order.order_id}} - {{order.order_date}}</td></tr><tr><td><strong>Customer:</strong></td><td>{{order.cust_firstname}} {{order.cust_lastname}}<br>{{order.address_line_1}}<br>{{order.city}}, {{order.state}} {{order.postal_code}}</td></tr><tr><td></td><td>{{order.products}}</td></tr></table>'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [{{order.lon}}, {{order.lat}}]
                        }
                    }
                    {% endfor %}
                    {% endif %}
                ]
            }
        });
        map.addSource('my_current', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
                    {% if my_current %}
                    {% for order in my_current %}
                    {% if not loop.first %},{% endif %}
                    {
                        'type': 'Feature',
                        'properties': {
                            'description':
                                '<table><tr><td><strong>Scout:</strong></td><td>{{order.scout_firstname}} {{order.scout_lastname}}</td></tr><tr><td><strong>Order# & Date:</strong></td><td>#{{order.order_id}} - {{order.order_date}}</td></tr><tr><td><strong>Customer:</strong></td><td>{{order.cust_firstname}} {{order.cust_lastname}}<br>{{order.address_line_1}}<br>{{order.city}}, {{order.state}} {{order.postal_code}}</td></tr><tr><td></td><td>{{order.products}}</td></tr></table>'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [{{order.lon}}, {{order.lat}}]
                        }
                    }
                    {% endfor %}
                    {% endif %}

                ]
            }
        });
      
        // Add a layer showing the places.
        map.addLayer({
            'id': 'all_old',
            'type': 'circle',
            'source': 'all_old',
            'paint': {
                'circle-color': '#ab0000',
                'circle-radius': 5,
                'circle-stroke-width': 2,
                'circle-stroke-color': '#ffffff'
            }
        });
        
        map.addLayer({
            'id': 'my_old',
            'type': 'circle',
            'source': 'my_old',
            'paint': {
                'circle-color': '#2c9e60',
                'circle-radius': 5,
                'circle-stroke-width': 2,
                'circle-stroke-color': '#ffffff'
            }
        });        

        map.addLayer({
            'id': 'all_current',
            'type': 'circle',
            'source': 'all_current',
            'paint': {
                'circle-color': '#f20000',
                'circle-radius': 5,
                'circle-stroke-width': 2,
                'circle-stroke-color': '#ffffff'
            }
        });
        
        map.addLayer({
            'id': 'my_current',
            'type': 'circle',
            'source': 'my_current',
            'paint': {
                'circle-color': '#4873f8',
                'circle-radius': 5,
                'circle-stroke-width': 2,
                'circle-stroke-color': '#ffffff'
            }
        });        

// Create a popup, but don't add it to the map yet.
        const popup = new mapboxgl.Popup({
            closeButton: false,
            closeOnClick: false
        });

        map.on('mouseenter', 'all_old', (e) => {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            // Copy coordinates array.
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            // Populate the popup and set its coordinates
            // based on the feature found.
            popup.setLngLat(coordinates).setHTML(description).addTo(map);
        });

        map.on('mouseleave', 'all_old', () => {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });

        map.on('mouseenter', 'my_old', (e) => {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            // Copy coordinates array.
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            // Populate the popup and set its coordinates
            // based on the feature found.
            popup.setLngLat(coordinates).setHTML(description).addTo(map);
        });

        map.on('mouseleave', 'my_old', () => {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });

        map.on('mouseenter', 'all_current', (e) => {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            // Copy coordinates array.
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            // Populate the popup and set its coordinates
            // based on the feature found.
            popup.setLngLat(coordinates).setHTML(description).addTo(map);
        });

        map.on('mouseleave', 'all_current', () => {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });

        map.on('mouseenter', 'my_current', (e) => {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            // Copy coordinates array.
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            // Populate the popup and set its coordinates
            // based on the feature found.
            popup.setLngLat(coordinates).setHTML(description).addTo(map);
        });

        map.on('mouseleave', 'my_current', () => {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });


    });

//--></script>

{{ footer }}